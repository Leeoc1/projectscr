{"ast":null,"code":"import axios from \"axios\";\n\n// API 설정 및 기본 설정\nconst api = axios.create({\n  baseURL: \"http://localhost:8080\",\n  timeout: 10000,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// 현재상영작과 상영예정작 목록 조회\nexport const getMoviesForAdmin = () => api.get(\"/movies/admin\").then(response => response.data).catch(error => {\n  console.error(\"Error fetching movies for admin:\", error);\n  return {\n    currentMovies: [],\n    upcomingMovies: []\n  };\n});\n\n// 지역별 상영관 목록 조회\nexport const getScreens = regionCode => api.get(\"/api/screens\", {\n  params: {\n    regionCode\n  }\n}).then(response => response.data).catch(error => {\n  console.error(\"Error fetching screens:\", error);\n  return [];\n});\n\n// 직원 목록 조회\nexport const getStaffs = () => api.get(\"/staff\").then(response => response.data).catch(error => {\n  console.error(\"Error fetching staffs:\", error);\n  return [];\n});\n\n// 전체 사용자 목록 조회\nexport const getAllUsers = () => api.get(\"/users/list\").then(response => response.data).catch(error => {\n  console.error(\"Error fetching users:\", error);\n  return [];\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","headers","getMoviesForAdmin","get","then","response","data","catch","error","console","currentMovies","upcomingMovies","getScreens","regionCode","params","getStaffs","getAllUsers"],"sources":["C:/Users/YONSAI/Desktop/teamproject/projectscr/front/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// API 설정 및 기본 설정\r\nconst api = axios.create({\r\n  baseURL: \"http://localhost:8080\",\r\n  timeout: 10000,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// 현재상영작과 상영예정작 목록 조회\r\nexport const getMoviesForAdmin = () =>\r\n  api\r\n    .get(\"/movies/admin\")\r\n    .then((response) => response.data)\r\n    .catch((error) => {\r\n      console.error(\"Error fetching movies for admin:\", error);\r\n      return { currentMovies: [], upcomingMovies: [] };\r\n    });\r\n\r\n// 지역별 상영관 목록 조회\r\nexport const getScreens = (regionCode) =>\r\n  api\r\n    .get(\"/api/screens\", { params: { regionCode } })\r\n    .then((response) => response.data)\r\n    .catch((error) => {\r\n      console.error(\"Error fetching screens:\", error);\r\n      return [];\r\n    });\r\n\r\n// 직원 목록 조회\r\nexport const getStaffs = () =>\r\n  api\r\n    .get(\"/staff\")\r\n    .then((response) => response.data)\r\n    .catch((error) => {\r\n      console.error(\"Error fetching staffs:\", error);\r\n      return [];\r\n    });\r\n\r\n// 전체 사용자 목록 조회\r\nexport const getAllUsers = () =>\r\n  api\r\n    .get(\"/users/list\")\r\n    .then((response) => response.data)\r\n    .catch((error) => {\r\n      console.error(\"Error fetching users:\", error);\r\n      return [];\r\n    });\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAC/BL,GAAG,CACAM,GAAG,CAAC,eAAe,CAAC,CACpBC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CACjCC,KAAK,CAAEC,KAAK,IAAK;EAChBC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;EACxD,OAAO;IAAEE,aAAa,EAAE,EAAE;IAAEC,cAAc,EAAE;EAAG,CAAC;AAClD,CAAC,CAAC;;AAEN;AACA,OAAO,MAAMC,UAAU,GAAIC,UAAU,IACnChB,GAAG,CACAM,GAAG,CAAC,cAAc,EAAE;EAAEW,MAAM,EAAE;IAAED;EAAW;AAAE,CAAC,CAAC,CAC/CT,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CACjCC,KAAK,CAAEC,KAAK,IAAK;EAChBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;EAC/C,OAAO,EAAE;AACX,CAAC,CAAC;;AAEN;AACA,OAAO,MAAMO,SAAS,GAAGA,CAAA,KACvBlB,GAAG,CACAM,GAAG,CAAC,QAAQ,CAAC,CACbC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CACjCC,KAAK,CAAEC,KAAK,IAAK;EAChBC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAC9C,OAAO,EAAE;AACX,CAAC,CAAC;;AAEN;AACA,OAAO,MAAMQ,WAAW,GAAGA,CAAA,KACzBnB,GAAG,CACAM,GAAG,CAAC,aAAa,CAAC,CAClBC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CACjCC,KAAK,CAAEC,KAAK,IAAK;EAChBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;EAC7C,OAAO,EAAE;AACX,CAAC,CAAC;AAEN,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}